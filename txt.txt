import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import tailwindcss from '@tailwindcss/vite';

export default defineConfig({
  base: '/',
  plugins: [react(), tailwindcss()],
  build: {
    outDir: '../server/public', // This builds React into backend/public folder
    emptyOutDir: true,          // Clears old build files before new build
  },
});

import dotenv from "dotenv";
dotenv.config({ path: './.env' });

import express from "express";
import cors from 'cors';
import cookieParser from 'cookie-parser';
import session from 'express-session';
import MongoStore from 'connect-mongo';
import passport from './middleware/passport.middleware.js';
import path from 'path';
import { fileURLToPath } from 'url';

const app = express();
const isProduction = process.env.NODE_ENV === 'production';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
app.set("trust proxy", 1); // Trust proxy for secure cookies on Render

// ✅ CORS Setup
const allowedOrigins = [
  'http://localhost:5173',
  'https://shopzo-website.onrender.com',
  'https://www.shopzo.com',
  'https://shopzo.com',
];

const corsOptions = {
  origin: function (origin, callback) {
    if (!origin || allowedOrigins.includes(origin)) {
      callback(null, true);
    } else {
      callback(new Error(`CORS policy: No access from origin ${origin}`), false);
    }
  },
  methods: ['GET', 'POST', 'PUT', 'DELETE'],
  credentials: true,
  allowedHeaders: ['Content-Type', 'Authorization'],
  optionsSuccessStatus: 200,
};

// ✅ Session Setup
const expressSessionOption = {
  secret: process.env.EXPRESS_SESSION_SECRET,
  resave: false,
  saveUninitialized: false,
  store: MongoStore.create({
    mongoUrl: process.env.MONGODB_URI,
    collectionName: 'sessions',
    autoRemove: 'disabled',
  }),
  cookie: {
    httpOnly: true,
    maxAge: 24 * 60 * 60 * 1000, // 1 day
    secure: isProduction,
    sameSite: isProduction ? 'none' : 'lax',
  },
};

// ✅ Middlewares
app.use(cors(corsOptions));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(cookieParser());
app.use(session(expressSessionOption));
app.use(passport.initialize());
app.use(passport.session());

// ✅ Logging (Optional)
app.use((req, res, next) => {
  console.log("➡️  Request:", req.method, req.url);
  console.log("🧁 Cookies:", req.cookies);
  console.log("🎯 Session ID:", req.sessionID);
  next();
});

// ✅ Serve static frontend
const clientBuildPath = path.join(__dirname, 'public');
app.use(express.static(clientBuildPath));

// ✅ Routers
import userRouter from "./router/user.router.js";
import vendorRouter from "./router/vendor.router.js";
import adminRouter from "./router/admin.router.js";
import categoryRouter from "./router/category.router.js";
import productRouter from "./router/product.router.js";
import navigationRouter from "./router/navigation.router.js";

app.use('/api/user', userRouter);
app.use('/api/vendor', vendorRouter);
app.use('/api/admin', adminRouter);
app.use('/api/category', categoryRouter);
app.use('/api/product', productRouter);
app.use('/api/navigation', navigationRouter);

// ✅ Catch-All for React Router
app.use((req, res, next) => {
  if (req.path.startsWith("/api/")) return next();
  res.sendFile(path.join(clientBuildPath, "index.html"));
});

export { app };
